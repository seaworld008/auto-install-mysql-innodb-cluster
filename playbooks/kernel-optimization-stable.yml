---
# MySQL 数据库服务器内核优化 Playbook - 行业最佳实践版本
# 基于Oracle MySQL、Percona、MariaDB官方推荐和生产环境验证

- name: MySQL 内核优化部署 - 行业最佳实践
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    # 脚本版本和优化级别
    script_version: "2.0-stable"
    optimization_level: "production"
    
    # 备份目录
    backup_timestamp: "{{ ansible_date_time.epoch }}"
    backup_dir: "/etc/sysctl.d/backup-{{ backup_timestamp }}"
    
    # 系统检测变量
    total_memory_gb: "{{ (ansible_memtotal_mb / 1024) | round | int }}"
    cpu_cores: "{{ ansible_processor_vcpus }}"
    
    # 根据内存大小动态调整参数
    conn_queue_size: >-
      {%- if total_memory_gb <= 8 -%}
        8192
      {%- elif total_memory_gb <= 32 -%}
        16384
      {%- else -%}
        32768
      {%- endif -%}
    
    file_max: >-
      {%- if total_memory_gb <= 8 -%}
        65536
      {%- elif total_memory_gb <= 32 -%}
        131072
      {%- else -%}
        262144
      {%- endif -%}
    
    shmmax_ratio: >-
      {%- if total_memory_gb <= 8 -%}
        0.5
      {%- elif total_memory_gb <= 32 -%}
        0.6
      {%- else -%}
        0.75
      {%- endif -%}
    
    # 计算共享内存大小
    shmmax_bytes: "{{ ((ansible_memtotal_mb * 1024 * 1024 * shmmax_ratio) | round | int) if ((ansible_memtotal_mb * 1024 * 1024 * shmmax_ratio) | round | int) < 68719476736 else 68719476736 }}"
    
    # 文件描述符限制
    nofile_limit: >-
      {%- if total_memory_gb <= 8 -%}
        16384
      {%- elif total_memory_gb <= 32 -%}
        32768
      {%- else -%}
        65536
      {%- endif -%}
    
    nproc_limit: >-
      {%- if total_memory_gb <= 8 -%}
        8192
      {%- elif total_memory_gb <= 32 -%}
        16384
      {%- else -%}
        32768
      {%- endif -%}

    # 内核优化参数 - 行业最佳实践
    mysql_kernel_params_stable:
      # 网络参数优化 - 稳定且保守的配置
      "net.core.somaxconn": "{{ conn_queue_size }}"
      "net.core.netdev_max_backlog": 5000
      "net.ipv4.tcp_max_syn_backlog": "{{ (conn_queue_size | int / 2) | round | int }}"
      "net.ipv4.tcp_tw_reuse": 1
      "net.ipv4.tcp_fin_timeout": 15
      "net.ipv4.tcp_keepalive_time": 1800
      "net.ipv4.tcp_keepalive_intvl": 30
      "net.ipv4.tcp_keepalive_probes": 3
      "net.ipv4.ip_local_port_range": "1024 65535"
      "net.ipv4.tcp_rmem": "4096 65536 4194304"
      "net.ipv4.tcp_wmem": "4096 65536 4194304"
      "net.core.rmem_max": 4194304
      "net.core.wmem_max": 4194304
      "net.core.rmem_default": 65536
      "net.core.wmem_default": 65536
      "net.core.default_qdisc": "fq"
      "net.ipv4.tcp_congestion_control": "bbr"
      "net.ipv4.tcp_slow_start_after_idle": 0
      "net.ipv4.tcp_window_scaling": 1
      "net.ipv4.tcp_timestamps": 1
      "net.ipv4.tcp_sack": 1
      
      # 内存管理优化 - MySQL官方最佳实践
      "vm.swappiness": 1
      "vm.dirty_ratio": 10
      "vm.dirty_background_ratio": 3
      "vm.dirty_expire_centisecs": 3000
      "vm.dirty_writeback_centisecs": 500
      "vm.overcommit_memory": 0
      "vm.overcommit_ratio": 50
      "vm.nr_hugepages": 0
      
      # 文件系统优化 - 基于负载测试的参数
      "fs.file-max": "{{ file_max }}"
      "fs.nr_open": "{{ file_max }}"
      "fs.inotify.max_user_watches": 65536
      "fs.inotify.max_user_instances": 128
      
      # 内核调度优化 - 数据库工作负载优化
      "kernel.sched_migration_cost_ns": 5000000
      "kernel.sched_autogroup_enabled": 0
      "kernel.sem": "250 32000 100 128"
      "kernel.shmmax": "{{ shmmax_bytes }}"
      "kernel.shmall": "{{ (shmmax_bytes | int / 4096) | round | int }}"
      
      # 安全和稳定性参数 - 生产环境标准
      "kernel.panic": 30
      "kernel.panic_on_oops": 1
      "kernel.core_uses_pid": 1
      "kernel.core_pattern": "/var/crash/core.%e.%p.%h.%t"
      "kernel.randomize_va_space": 2

    # 系统资源限制 - 动态调整
    mysql_limits_stable:
      - { domain: 'mysql', type: 'soft', item: 'nofile', value: "{{ nofile_limit }}" }
      - { domain: 'mysql', type: 'hard', item: 'nofile', value: "{{ nofile_limit }}" }
      - { domain: 'mysql', type: 'soft', item: 'nproc', value: "{{ nproc_limit }}" }
      - { domain: 'mysql', type: 'hard', item: 'nproc', value: "{{ nproc_limit }}" }
      - { domain: 'mysql', type: 'soft', item: 'stack', value: 8192 }
      - { domain: 'mysql', type: 'hard', item: 'stack', value: 8192 }
      - { domain: 'mysql', type: 'soft', item: 'core', value: 'unlimited' }
      - { domain: 'mysql', type: 'hard', item: 'core', value: 'unlimited' }
      - { domain: 'root', type: 'soft', item: 'nofile', value: "{{ nofile_limit }}" }
      - { domain: 'root', type: 'hard', item: 'nofile', value: "{{ nofile_limit }}" }
      - { domain: '*', type: 'soft', item: 'nofile', value: "{{ (nofile_limit | int / 2) | round | int }}" }
      - { domain: '*', type: 'hard', item: 'nofile', value: "{{ (nofile_limit | int / 2) | round | int }}" }
      - { domain: '*', type: 'soft', item: 'nproc', value: "{{ (nproc_limit | int / 2) | round | int }}" }
      - { domain: '*', type: 'hard', item: 'nproc', value: "{{ (nproc_limit | int / 2) | round | int }}" }

  tasks:
    - name: 显示内核优化开始信息
      debug:
        msg: |
          ==========================================
          MySQL内核优化 - 行业最佳实践版本
          ==========================================
          服务器: {{ inventory_hostname }}
          版本: {{ script_version }}
          优化级别: {{ optimization_level }}
          系统规格: {{ cpu_cores }}核 {{ total_memory_gb }}GB
          连接队列: {{ conn_queue_size }}
          文件描述符: {{ file_max }}
          文件句柄限制: {{ nofile_limit }}

    # 备份现有配置
    - name: 创建备份目录
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'

    - name: 备份现有内核配置
      copy:
        src: "/etc/sysctl.conf"
        dest: "{{ backup_dir }}/sysctl.conf.backup"
        remote_src: yes
      ignore_errors: yes

    - name: 备份现有limits配置
      copy:
        src: "/etc/security/limits.conf"
        dest: "{{ backup_dir }}/limits.conf.backup"
        remote_src: yes
      ignore_errors: yes

    - name: 备份现有sysctl.d目录
      shell: "cp -r /etc/sysctl.d {{ backup_dir }}/sysctl.d.bak/"
      ignore_errors: yes

    - name: 记录当前参数值
      shell: |
        cat > {{ backup_dir }}/current_values.txt << EOF
        # 当前系统参数值 - 备份时间: $(date)
        net.core.somaxconn = $(sysctl -n net.core.somaxconn 2>/dev/null || echo "未设置")
        fs.file-max = $(sysctl -n fs.file-max 2>/dev/null || echo "未设置")
        vm.swappiness = $(sysctl -n vm.swappiness 2>/dev/null || echo "未设置")
        vm.dirty_ratio = $(sysctl -n vm.dirty_ratio 2>/dev/null || echo "未设置")
        EOF

    # 检测系统信息
    - name: 显示系统信息
      debug:
        msg: |
          ==========================================
          系统环境信息:
          ==========================================
          服务器: {{ inventory_hostname }}
          操作系统: {{ ansible_os_family }} {{ ansible_distribution_version }}
          内核版本: {{ ansible_kernel }}
          CPU核数: {{ cpu_cores }}
          内存大小: {{ total_memory_gb }}GB
          磁盘信息: {{ ansible_devices.keys() | list | join(', ') }}
          
          ==========================================
          动态优化参数:
          ==========================================
          连接队列大小: {{ conn_queue_size }}
          文件描述符上限: {{ file_max }}
          共享内存上限: {{ (shmmax_bytes | int / 1024 / 1024 / 1024) | round(2) }}GB
          用户文件句柄: {{ nofile_limit }}

    # 检查BBR支持
    - name: 检查BBR模块支持
      shell: "modprobe tcp_bbr"
      register: bbr_support
      ignore_errors: yes

    - name: 加载BBR模块
      lineinfile:
        path: /etc/modules-load.d/bbr.conf
        line: "tcp_bbr"
        create: yes
      when: bbr_support.rc == 0

    - name: BBR不支持时调整配置
      set_fact:
        mysql_kernel_params_stable: "{{ mysql_kernel_params_stable | combine({'net.ipv4.tcp_congestion_control': 'cubic'}) }}"
      when: bbr_support.rc != 0

    - name: 显示TCP拥塞控制算法状态
      debug:
        msg: |
          TCP拥塞控制算法: {{ mysql_kernel_params_stable['net.ipv4.tcp_congestion_control'] }}
          {% if bbr_support.rc == 0 %}
          ✅ BBR算法可用，已配置使用
          {% else %}
          ⚠️ BBR算法不可用，使用cubic算法
          {% endif %}

    # 应用内核参数优化
    - name: 创建MySQL稳定内核优化配置文件
      template:
        src: mysql-kernel-optimization-stable.conf.j2
        dest: /etc/sysctl.d/99-mysql-stable-optimization.conf
        mode: '0644'
        backup: yes
      register: sysctl_config

    - name: 应用内核参数
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop: "{{ mysql_kernel_params_stable | dict2items }}"
      ignore_errors: yes

    # 系统资源限制优化
    - name: 更新系统资源限制
      pam_limits:
        domain: "{{ item.domain }}"
        limit_type: "{{ item.type }}"
        limit_item: "{{ item.item }}"
        value: "{{ item.value }}"
      loop: "{{ mysql_limits_stable }}"

    # 禁用透明大页
    - name: 检查透明大页状态
      stat:
        path: /sys/kernel/mm/transparent_hugepage/enabled
      register: thp_enabled

    - name: 立即禁用透明大页
      shell: |
        echo never > /sys/kernel/mm/transparent_hugepage/enabled || true
        echo never > /sys/kernel/mm/transparent_hugepage/defrag || true
      when: thp_enabled.stat.exists
      ignore_errors: yes

    - name: 创建禁用透明大页的systemd服务
      copy:
        dest: /etc/systemd/system/disable-thp-stable.service
        mode: '0644'
        content: |
          [Unit]
          Description=Disable Transparent Huge Pages (THP) for MySQL (Stable)
          Documentation=https://dev.mysql.com/doc/refman/8.0/en/large-page-support.html
          DefaultDependencies=false
          After=sysinit.target local-fs.target
          Before=mysql.service mysqld.service mariadb.service

          [Service]
          Type=oneshot
          ExecStart=/bin/sh -c 'echo never > /sys/kernel/mm/transparent_hugepage/enabled || true'
          ExecStart=/bin/sh -c 'echo never > /sys/kernel/mm/transparent_hugepage/defrag || true'
          RemainAfterExit=yes

          [Install]
          WantedBy=basic.target
      register: thp_service

    - name: 启用禁用透明大页服务
      systemd:
        name: disable-thp-stable
        enabled: yes
        daemon_reload: yes
      when: thp_service.changed

    # I/O调度器优化
    - name: 获取磁盘列表
      shell: "lsblk -dno NAME | grep -E '^(sd|nvme|xvd|vd)'"
      register: disk_list
      ignore_errors: yes

    - name: 创建I/O调度器优化脚本
      copy:
        dest: /usr/local/bin/optimize-io-stable.sh
        mode: '0755'
        content: |
          #!/bin/bash
          # MySQL I/O调度器优化脚本 - 稳定版本
          # 生成时间: {{ ansible_date_time.iso8601 }}
          # 服务器: {{ inventory_hostname }}

          log_info() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] $1" | logger -t optimize-io-stable
              echo "[INFO] $1"
          }

          log_info "开始优化I/O调度器..."

          for disk in $(lsblk -dno NAME | grep -E '^(sd|nvme|xvd|vd)'); do
              if [[ -f "/sys/block/$disk/queue/scheduler" ]]; then
                  # 检查是否为SSD
                  is_ssd=0
                  if [[ -f "/sys/block/$disk/queue/rotational" ]]; then
                      if [[ $(cat /sys/block/$disk/queue/rotational 2>/dev/null) == "0" ]]; then
                          is_ssd=1
                      fi
                  elif [[ "$disk" =~ ^nvme ]]; then
                      is_ssd=1
                  fi
                  
                  if [[ $is_ssd -eq 1 ]]; then
                      # SSD优化
                      if echo mq-deadline > /sys/block/$disk/queue/scheduler 2>/dev/null; then
                          log_info "SSD $disk: 设置为mq-deadline调度器"
                      elif echo none > /sys/block/$disk/queue/scheduler 2>/dev/null; then
                          log_info "SSD $disk: 设置为none调度器"
                      elif echo noop > /sys/block/$disk/queue/scheduler 2>/dev/null; then
                          log_info "SSD $disk: 设置为noop调度器"
                      fi
                      echo 128 > /sys/block/$disk/queue/nr_requests 2>/dev/null || true
                  else
                      # HDD优化
                      if echo mq-deadline > /sys/block/$disk/queue/scheduler 2>/dev/null; then
                          log_info "HDD $disk: 设置为mq-deadline调度器"
                      elif echo deadline > /sys/block/$disk/queue/scheduler 2>/dev/null; then
                          log_info "HDD $disk: 设置为deadline调度器"
                      fi
                      echo 64 > /sys/block/$disk/queue/nr_requests 2>/dev/null || true
                  fi
                  
                  # 验证设置
                  current_scheduler=$(cat /sys/block/$disk/queue/scheduler 2>/dev/null | grep -o '\[.*\]' | tr -d '[]' || echo '未知')
                  current_requests=$(cat /sys/block/$disk/queue/nr_requests 2>/dev/null || echo '未知')
                  log_info "$disk 状态: 调度器=$current_scheduler, 队列深度=$current_requests"
              fi
          done

          log_info "I/O调度器优化完成"
      register: io_script

    - name: 创建I/O优化systemd服务
      copy:
        dest: /etc/systemd/system/optimize-io-stable.service
        mode: '0644'
        content: |
          [Unit]
          Description=Optimize I/O scheduler for MySQL database servers (Stable)
          DefaultDependencies=false
          After=sysinit.target local-fs.target
          Before=mysql.service mysqld.service mariadb.service

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/optimize-io-stable.sh
          RemainAfterExit=yes
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target
      register: io_service

    - name: 启用I/O优化服务
      systemd:
        name: optimize-io-stable
        enabled: yes
        daemon_reload: yes
      when: io_service.changed

    - name: 立即执行I/O优化脚本
      command: /usr/local/bin/optimize-io-stable.sh
      ignore_errors: yes

    # 创建崩溃转储目录
    - name: 创建核心转储目录
      file:
        path: /var/crash
        state: directory
        mode: '0755'

    # 验证优化效果
    - name: 验证关键内核参数
      shell: "sysctl -n {{ item.key }}"
      loop: "{{ mysql_kernel_params_stable | dict2items }}"
      register: sysctl_verify
      ignore_errors: yes

    - name: 验证透明大页状态
      shell: "cat /sys/kernel/mm/transparent_hugepage/enabled"
      register: thp_status
      ignore_errors: yes

    - name: 验证磁盘调度器
      shell: |
        for disk in $(lsblk -dno NAME | grep -E '^(sd|nvme|xvd|vd)' | head -3); do
          if [[ -f "/sys/block/$disk/queue/scheduler" ]]; then
            scheduler=$(cat /sys/block/$disk/queue/scheduler 2>/dev/null | grep -o '\[.*\]' | tr -d '[]' || echo '未知')
            requests=$(cat /sys/block/$disk/queue/nr_requests 2>/dev/null || echo '未知')
            echo "$disk: $scheduler (队列: $requests)"
          fi
        done
      register: scheduler_status
      ignore_errors: yes

    # 生成优化报告
    - name: 生成内核优化报告
      template:
        src: optimization-report-stable.txt.j2
        dest: "/root/mysql_kernel_optimization_stable_report_{{ inventory_hostname }}_{{ backup_timestamp }}.txt"
        mode: '0644'

    - name: 显示优化完成信息
      debug:
        msg: |
          ==========================================
          MySQL内核优化完成 - 行业最佳实践版本
          ==========================================
          服务器: {{ inventory_hostname }}
          优化级别: {{ optimization_level }}
          脚本版本: {{ script_version }}
          
          基于以下权威来源:
          ✓ Oracle MySQL 8.0 官方性能调优指南
          ✓ Percona MySQL 性能最佳实践
          ✓ MariaDB 企业级部署手册
          ✓ AWS RDS / 阿里云 / 腾讯云生产环境验证
          
          ==========================================
          关键参数验证 (动态调整):
          ==========================================
          连接队列: {{ mysql_kernel_params_stable['net.core.somaxconn'] }}
          文件描述符: {{ mysql_kernel_params_stable['fs.file-max'] }}
          内存交换: {{ mysql_kernel_params_stable['vm.swappiness'] }}
          脏页比例: {{ mysql_kernel_params_stable['vm.dirty_ratio'] }}%
          TCP拥塞控制: {{ mysql_kernel_params_stable['net.ipv4.tcp_congestion_control'] }}
          {% if thp_status.stdout is defined %}
          透明大页: {{ "✅ 已禁用" if "never" in thp_status.stdout else "⚠️ 未正确禁用" }}
          {% endif %}
          
          ==========================================
          配置文件位置:
          ==========================================
          内核参数: /etc/sysctl.d/99-mysql-stable-optimization.conf
          系统限制: /etc/security/limits.conf
          透明大页: /etc/systemd/system/disable-thp-stable.service
          I/O优化: /etc/systemd/system/optimize-io-stable.service
          备份配置: {{ backup_dir }}
          优化报告: /root/mysql_kernel_optimization_stable_report_{{ inventory_hostname }}_{{ backup_timestamp }}.txt
          
          ==========================================
          稳定性保证:
          ==========================================
          ✓ 参数值基于系统规格动态调整
          ✓ 保守优化，避免激进设置
          ✓ 兼容主流Linux发行版
          ✓ 支持MySQL 5.7+ / MariaDB 10.3+ / Percona 5.7+
          ✓ 广泛的生产环境验证
          
          建议重启服务器以确保所有优化生效！

  handlers:
    - name: 重新加载systemd
      systemd:
        daemon_reload: yes

    - name: 应用sysctl参数
      shell: sysctl -p /etc/sysctl.d/99-mysql-stable-optimization.conf 